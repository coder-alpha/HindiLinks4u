import urllib2
import string, base64, re

HTTP_HEADERS = {
	'Accept	text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
	'Accept-Encoding:	gzip, deflate',
	'Accept-Language:	en-US,en;q=0.5',
	'Connection:		keep-alive',
	'Referer:		http://filmshowonline.net',
	'User-Agent:		Mozilla/5.0 (Windows NT 6.1; WOW64; rv:33.0) Gecko/20100101 Firefox/33.0'
}

BASE_URL = 'http://filmshowonline.net/'
########################################################################################
def NormalizeURL(url):

	try:
		page_data = HTML.ElementFromURL(url)
		urlf = page_data.xpath("//iframe/@src")[0]
		urlf = urlf.replace('-640x360','')
			#if (page_data.find('dailymotion.com/swf/')) != -1:
			#data = HTML.StringFromElement(page_data)
			#url = re.findall ('flash\" src=\"(.*\n?)\"', data, re.MULTILINE)[0]
			#Log(url)
			#Log("url-------------- " + urlf)
		url = urlf
	except:
		url = url
		
	return url
####################################################################################################
def MetadataObjectForURL(url):


	ratingvalue = url

	return VideoClipObject(
		rating_key = ratingvalue
	)
	
####################################################################################################
def MediaObjectsForURL(url):

	#Log("url-----------" + url)
	

	return [
        	MediaObject(
			parts = [
				PartObject(
					key = 
						Callback(
							PlayVideo,
							url = url,
							fmt = 'hi'
						)
					)
				],
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			video_resolution = '720',
			audio_channels = 2,
			optimized_for_streaming = True if Client.Product != 'Plex Web' else False
			)
	]

####################################################################################################
@indirect
def PlayVideo(url, fmt):

	return IndirectResponse(VideoClipObject, key=url)
