import string, re

HTTP_HEADERS = {
	'Accept	text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
	'Accept-Encoding:	gzip, deflate',
	'Accept-Language:	en-US,en;q=0.5',
	'Connection:		keep-alive',
	'Referer:		http://hindilink4u.to',
	'User-Agent:		Mozilla/5.0 (Windows NT 6.1; WOW64; rv:33.0) Gecko/20100101 Firefox/33.0'
}

BASE_URL = 'http://hindilinks4u.to/'
########################################################################################
def NormalizeURL(url):
	
	return url

####################################################################################################
def MetadataObjectForURL(url):

	page = HTML.ElementFromURL(url)
	title = page.xpath("//h1/text()")[0]
	summary = page.xpath("//div/p/text()")[8]
	thumb = page.xpath("//div[@id='thumb']/img/@src")[0]
	rate = page.xpath("//div/p/text()")[6]
	rate = re.sub(r'(?is)/10.+', '', rate)
	rate = rate.replace(' ', '')
	ratingvalue = url
	
	try:
		page_data = HTML.ElementFromURL(url)
		url = page_data.xpath("//iframe/@src")[0]
		
		if 'ipithos' in url:
			page_data = HTML.ElementFromURL(url)

			keys = page_data.xpath("//div[@id='player_code']/script/text()")[1]
			keys.replace(u'\u007C','|')

			key = re.findall ( '\|(.*\n?)\|182', keys, re.MULTILINE)[0].split('|')
			key = key[len(key)-1]
			if len(key) == 0:
				key = re.findall ( '\|(.*\n?)182', keys, re.MULTILINE)[0].split('|')
				key = key[len(key)-3]

			dl = re.findall ( '\|(.*\n?)\|file', keys, re.MULTILINE)[0].split('|')
			dl = dl[len(dl)-1]
			
			name4 = keys.split('|')[8]
			name3 = keys.split('|')[9]
			name2 = keys.split('|')[10]
			name1 = keys.split('|')[11]
			
			if name1 == key:
				name1 = ''
			name = name1 + name2 + '.' + name3 + '.' + name4
			
			url0 = 'http://' + dl + '.ipithos.to:182/d/' + key + '/' + name
			# http://dl3.ipithos.to:182/d/r46rm3743o4pc44ujkruegxt3igaynl52x6jia2h4itii7r72kfwp462/Big_Game__2014___In_Hindi_.flv.mp4
		else:
			url = page_data.xpath(".//div[@class='entry-content rich-content']//@href")
			for each in url:
				if 'played' in each:
					url0 = each
	except:
		url0 = url

	return VideoClipObject(
		title = title,
		summary = summary + '\n\n' + url0,
		rating = float(rate),
		thumb = Resource.ContentsOfURLWithFallback(url = thumb, fallback='icon-cover.png'),
		rating_key = ratingvalue
	)

####################################################################################################
def MediaObjectsForURL(url):

		#Log("url-----------" + url)
	
	return [
		MediaObject(
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			video_resolution = '720',
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True,
			parts = [PartObject(key=Callback(PlayVideo, url=url))]
		)
	]

####################################################################################################
@indirect
def PlayVideo(url):

	try:
		page_data = HTML.ElementFromURL(url)
		url = page_data.xpath("//iframe/@src")[0]
		
		if 'ipithos' in url:
			page_data = HTML.ElementFromURL(url)

			keys = page_data.xpath("//div[@id='player_code']/script/text()")[1]
			keys.replace(u'\u007C','|')

			key = re.findall ( '\|(.*\n?)\|182', keys, re.MULTILINE)[0].split('|')
			key = key[len(key)-1]
			if len(key) == 0:
				key = re.findall ( '\|(.*\n?)182', keys, re.MULTILINE)[0].split('|')
				key = key[len(key)-3]

			dl = re.findall ( '\|(.*\n?)\|file', keys, re.MULTILINE)[0].split('|')
			dl = dl[len(dl)-1]
			
			name4 = keys.split('|')[8]
			name3 = keys.split('|')[9]
			name2 = keys.split('|')[10]
			name1 = keys.split('|')[11]
			
			if name1 == key:
				name1 = ''
			name = name1 + name2 + '.' + name3 + '.' + name4
			
			url0 = 'http://' + dl + '.ipithos.to:182/d/' + key + '/' + name
			# http://dl3.ipithos.to:182/d/r46rm3743o4pc44ujkruegxt3igaynl52x6jia2h4itii7r72kfwp462/Big_Game__2014___In_Hindi_.flv.mp4
		else:
			url = page_data.xpath(".//div[@class='entry-content rich-content']//@href")
			for each in url:
				if 'played' in each:
					url0 = each
	except:
		url0 = url


	return IndirectResponse(VideoClipObject, key=url0)
